{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","catg","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifsData","map","gif","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","gifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAqCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAoBrC,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAG1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,2BACIO,KAAK,OAAOC,MAAOT,EACnBU,SApBc,SAACP,GAAO,IACvBM,EAASN,EAAEQ,OAAXF,MACPR,EAAcQ,Q,uBCRTG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KAGDC,EAAWD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCgBLO,EAdK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,GAAc,cCoCdO,EArCC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDJ,SAAAA,GAAa,IAAD,EACVd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAiBpC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAhB,GACFc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAGvB,CAACpB,IAEIqB,EDLsBI,CAAazB,GAA9B0B,EAXgB,EAWrBnB,KAAWa,EAXU,EAWVA,QAGlB,OACI,kBAAC,WAAD,KACI,wBAAIJ,UAAU,qCACThB,GAEJoB,GAAW,uBAAGJ,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aAEPU,EAAKjB,KAAI,SAAAC,GAAG,OACR,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEKvCkB,EA/BM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,kBAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAavB,OACI,kBAAC,WAAD,KACI,wBAAI+B,UAAU,aAAd,gBACA,kBAAC,EAAD,CAAa/B,cAAeA,IAC5B,6BACA,6BACA,yBAAK+B,UAAU,aAEPa,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,U,MCnB1D8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.1c805326.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        const {value} = e.target\r\n        setinputValue(value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if(inputValue.trim().length > 2){    // Validacion input debe ser mayor que 2 letras\r\n            // Esta funcion la recibimos por props desde GifExpertApp mara \r\n            // modificar el estado de GifExpertApp y cats es el estado anterior\r\n            setCategories(catg => [inputValue, ...catg]);\r\n            setinputValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" value={inputValue} \r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=21OrpGmkALxkujKgZL9feKQWHfSRuoKg`\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n    \r\n    // extraer de la data lo que interesa\r\n    const gifsData = data.map(gif => {\r\n        return {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url: gif.images?.downsized_medium.url,  // ? si hay image tomalas\r\n        }\r\n    });\r\n    return gifsData;\r\n}","import React from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n           <img src={url} alt={title}/> \r\n           <p>{title? title: 'No title'}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React, {Fragment} from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import PropTypes from 'prop-types';\r\nimport GifGridItem from './GifGridItem';\r\n//import { getGif } from '../helpers/getGifs';\r\n\r\n// Componente para mostrar una coleccion de elementos\r\nconst GifGrid = ({category}) => {\r\n    /*const [gifs, setGifs] = useState([]);\r\n    // es como ComponentDidMount se ejecuta cuando el componente es renderizado\r\n    // por primera vez la lista vacia es una lista de dependencias\r\n    useEffect(() => {\r\n        getGif(category)\r\n            //.then(gifsData => setGifs(gifsData))\r\n            .then(setGifs);         \r\n    }, [category]);\r\n    // si la categoria cambia debemos ejecutar otra vez getGif*/\r\n    \r\n    const {data:gifs, loading} = useFetchGifs(category); \r\n    // puedo renombrar cuando hago desestructuracion\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className='animate__animated animate__fadeIn'>\r\n                {category}\r\n            </h3>\r\n            {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n            <div className='card-grid'>\r\n                {\r\n                    gifs.map(gif => (\r\n                        <GifGridItem key={gif.id} {...gif}/> \r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n// {...gif} manda las propiedades por separada o sea id, title y url \r\n// asi es mas facil usar desestructuracion en GifGridItem\r\n\r\nGifGrid.propTypes = {\r\n\r\n};\r\n\r\nexport default GifGrid;\r\n\r\n// React cada vez que hay un cambio en un estado renderiza el componente\r\n// otra vez por lo que ejecuta el metodo getGif() cada vez que hay un cambio\r\n// por lo que hay que usar otro hook el useEffect","import { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n// Crearemos un customHook que no son mas que funciones y se usan para separar\r\n// logica y poder reutilizarlo. Un Custom hook puede tener estado y usar hooks\r\n// dentro \r\nexport const useFetchGifs = category => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // useEffect no puede ser async\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(gifsData => {\r\n                setState({\r\n                    data: gifsData,\r\n                    loading: false,\r\n                });\r\n            }); \r\n    },[category]);\r\n\r\n    return state;      // {data:[], loading: true}\r\n}\r\n\r\n","import React, {Fragment, useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch Man']);\r\n\r\n    /*const handleAdd = () => {\r\n        // Agregar HunterxHunter\r\n        //setCategories([...categories, 'HunterxHunter']); // cambia es estado anterior por el nuevo\r\n        //setCategories(['HunterxHunter', ...categories]);\r\n        // recordar que no debemos mutar el original osea no podemos usar push\r\n        // otra forma es pasandole un callback con las categorias anteriores o sea el estado anterior\r\n        setCategories(cats => [...categories, 'HunterxHunter']);\r\n    }*/\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2 className='app-title'>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <br/>\r\n            <hr/>\r\n            <div className='container'>\r\n                {\r\n                    categories.map(category =>(\r\n                        <GifGrid key={category} category={category}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))"],"sourceRoot":""}